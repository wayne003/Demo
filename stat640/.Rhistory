if (CVSwitch == 1)
{
idpartition <- DataPartition(breakpoints.tr)
fold <- 10
for ( f in 1:fold)
{
if (CVSwitch == 1)
{
idpartition <- DataPartition(breakpoints.tr)
fold <- 10
for ( f in 1:fold)
{
if (CVSwitch == 1)
{
idpartition <- DataPartition(breakpoints.tr)
fold <- 10
for ( f in 1:fold)
{
mean(msecv)
f=1
dim(betar[[1]])
betar[[1]]
test <- TreePredictP(tr,betar[[1]])
mse(tr[,1:32],test)
plot(test[1:317,])
dim(test)
plot(test[1:317,10],type='l')
dev.new()
plot(tr[1:317,10],type='l')
?rpart
plot(tr[1:317,10],type='l')
?rpart
?rpart
library(rpart)
?rpart
f=1
knnreg(x=tr[,33:ncol(tr)],y=tr[,1:32])
head(tr[,1:32])
knnreg(x=tr[,33:ncol(tr)],y=as.matrix(tr[,1:32]))
test <- knnreg(x=tr[,33:ncol(tr)],y=as.matrix(tr[,1:32]),k=600)
head(test)
testprd <- predict(test,newdata=tr[,33:ncol(tr)])
test <- knnreg(x=tr[,33:ncol(tr)],y=as.matrix(tr[,1:32]),k=600)
?knnreg
fit <- knnreg(x=as.matrix(tr[,33:ncol(tr)]),y=as.matrix(tr[,1:32]),k=600)
pred <- predict(fit,as.matrix(tr[,33:ncol(tr)]))
pred <- predict(fit,as.matrix(tr[1:317,33:ncol(tr)]))
fit <- knnreg(x=as.matrix(tr[,33:ncol(tr)]),y=as.matrix(tr[,1:32]),k=30)
pred <- predict(fit,as.matrix(tr[1:317,33:ncol(tr)]))
fit <- knnreg(x=as.matrix(tr[,33:ncol(tr)]),y=as.matrix(tr[,1]),k=100)
pred <- predict(fit,as.matrix(tr[1:317,33:ncol(tr)]))
plot(pred,type='l')
dev.new()
plot(tr[1:317,1],type='l')
fit <- knnreg(x=as.matrix(tr[,33:ncol(tr)]),y=as.matrix(tr[,1]),k=600)
pred <- predict(fit,as.matrix(tr[1:317,33:ncol(tr)]))
fit <- knnreg(x=as.matrix(tr[,33:ncol(tr)]),y=as.matrix(tr[,1]),k=300)
pred <- predict(fit,as.matrix(tr[1:317,33:ncol(tr)]))
plot(pred,type='l')
mse(pred,tr[1:317,1])
gc()
prdtest <- TreePredictP(tr[1:317,33:ncol(tr)],betar[[1]])
dim(prdtest)
mse(prdtest,tr[1:317,1:32])
plot(prdtest[,10],type='l')
dev.new()
plot(tr[1:317,10],type='l')
plot(tr[1:317,10],type='l')
lines(prdtest[,10],col=2)
object.size(betar[[1]])
save(betar,file='/scratch/zz38/model.Rdata')
df -h
obs
105 %in% obs
breakpoints.tr
dim(dat)
prdtest <- TreePredictP(dat[335:638,],betar[[1]])
dim(prdtest)
mse(dat[30648:30919,1:32],prdtest)
dim(dat[30648:30919,])
plot(dat[30648:30919,10],type='l')
lines(prdtest[,10],col=2)
plot(dat[30648:30919,10],type='l')
plot(prdtest[,10],col=2)
plot(prdtest[,10],col=2,type='l')
plot(prdtest[,10],col=2,type='l')
dev.new()
plot(dat[30648:30919,10],type='l')
dim(prdtest)
truevalue <- dat[30648:30919,]
dim(truevalue
)
truevalue <- dat[30648:30919,1:32]
truevalue2 <- rbind(truevalue,mean(prdtest))
dim(truevalue2)
truevalue2 <- rbind(truevalue,rep(mean(prdtest),272-304,32))
dim(truevalue2)
truevalue2 <- rbind(truevalue,matrix(mean(prdtest),ncol=32,nrow=(304-272)))
truevalue2 <- rbind(as.matrix(truevalue),matrix(mean(prdtest),ncol=32,nrow=(304-272)))
dim(truevalue2)
plot(prdtest,type='l')
line(trueval
plot(prdtest[,10],type='l')
line(truevalue[,10],type='l')
line(truevalue[,10],col=2)
lines(truevalue[,10],col=2)
mse(truevalue,prdtest)
truevalue2 <- rbind(as.matrix(truevalue),matrix(apply(prdtest,2,mean),ncol=32,nrow=(304-272)))
dim(truevalue2)
mse(truevalue,prdtest)
plot(prdtest[,10],type='l')
lines(truevalue[,10],col=2)
mse(truevalue2,prdtest)
mse(truevalue2,prdtest)
plot(prdtest[,10],type='l')
lines(truevalue2[,10],col=2)
prdtest <- TreePredictP(dat[335:638,],betar[[1]])
mse(truevalue,prdtest[1:272,])
plot(truevalue,type='l')
plot(truevalue[,10],type='l')
lines(prdtest[,10],col=2)
dev.new()
prdtest <- TreePredictP(tr[,
breakpoints.tr
mse(tr[1864:2146,1:32],prdtest)
plot(tr[1864:2146,10],type='l')
lines(prdtest,col=2)
plot(prdtest
plot(tr[1864:2146,10],type='l')
plot(prdtest[,10],col=2)
plot(tr[1864:2146,10],type='l')
lines(prdtest[,10],col=2)
lines(prdtest,col=2)
dim(tr[1864:2146,])
dim(prdtest)
mse(prdtest[1:283,],tr[1864:2146,])
pr1 <- TreePredictP(tr[30647:30919,33:ncol(tr)],betar[[1]])
pr2 <- TreePredictP(tr[33487:33807,33:ncol(tr)],betar[[1]])
pr3 <- TreePredictP(tr[1864:2146,33:ncol(tr)],betar[[1]])
pr <- pr1+pr2+pr3
truevalue <- tr[639:948,1:32]
dim(truevalue)
dim(pr1)
dim(pr2)
dim(pr3)
pr <-pr1[1:273,] +pr2[1:273,]+pr3[1:273,]
pr/3
prd <- pr/3
mse(prd,truevalue)
plot(truevalue[,10],type='l')
lines(prd[,10],col=2)
mse(prd,truevalue[1:273,])
prd2 <- rbind(prd,matrix(apply(prd,1,mean)
dim(prd)
dim(truevalue)
prd2 <- rbind(prd,matrix(apply(prd,1,mean),ncol=32,nrow=(310-273)))
prd2 <- rbind(as.matrix(prd),matrix(apply(prd,1,mean),ncol=32,nrow=(310-273)))
prd2 <- rbind(as.matrix(prd),matrix(apply(prd,1,mean),ncol=32,nrow=(310-273)))
prd2 <- rbind(as.matrix(prd),matrix(apply(prd,2,mean),ncol=32,nrow=(310-273)))
dim(prd2)
mse(prd2,truevalue)
plot(truevalue,type='l')
plot(truevalue[,10],type='l')
lines(prd2[,10],col=2)
prd2 <- rbind(as.matrix(prd),matrix(apply(prd,2,mean),ncol=32,nrow=(310-273),byrow=T))
plot(truevalue[,10],type='l')
lines(prd2[,10],col=2)
mse(prd2,truevalue)
}
i=1
s=1
Slist[1,1]
trainID[Slist[1,1],c(1,6)]
ObsJoint(trainID[Slist[1,1],c(1,6)],training)
ObsJoin(trainID[Slist[1,1],c(1,6)],training)
dim(training)
trainID
}
lapply(prdtst,nrow)
shortest
for (i in 1:nrow(breakpoints.tst))
{
tst <- testingX[ (breakpoints.tst0[i,1]+1):breakpoints.tst0[i+1,1], ]
Slist <- CorResult[i,2:ncol(CorResult)]
prdtst <- list()
for (s in 1:ncol(Slist))
{
prdX <- training[trainID[Slist[1,s],1]:trainID[Slist[1,s],6],]
prdtst[[s]] <- TreePredictP(prdX,fit)
}
prdlength <- lapply(prdtst,nrow)
shortest <- min(unlist(prdlength))
testlength <- nrow(tst)
for ( d in 1:length(prdtst) )
{
if (d==1)
{
prdResult <- prdtst[[d]][1:shortest,]
} else
{
prdResult <- prdResult + prdtst[[d]][1:shortest,]
}
}
prdResult <- prdResult / length(prdtst)
if (nrow(tst) <= shortest)
{
prdResult2 <- prdResult[1:nrow(tst),]
} else
{
prdResult2 <- rbind(prdResult,matrix(apply(prdResult,2,mean),nrow=testlength-shortest,ncol=32,byrow=T))
}
if (i == 1)
{
prdtst.result <- prdResult2
} else
{
prdtst.result <- rbind(prdtst.result,prdResult2)
}
}
save(prdtst.result,file="/scratch/zz38/result.Rdata")
head(prdtst.result)
dim(prdtst.result)
prdtst.result
library(plotly)
plot_ly(z=prdtst.result,type='surface')
library(plotly)
load("/scratch/zz38/result.Rdata
")
")
load("/scratch/zz38/result.Rdata")
plot_ly(z=prdtst.result,type='l')
plot_ly(z=prdtst.result,type='surface')
plot_ly(z=prdtst.result,type='surface')
plot(prdtst[1:317,10],type='l')
plot(prdtst.result[1:317,10],type='l')
plot_ly(z=prdtst.result[1:317,],type='surface')
arima(prdtst.result[1:317,10],order=c(5,5,0))
test <- arima(prdtst.result[1:317,10],order=c(5,5,0))
testprd <- predict(tst,n=10)
testprd <- predict(test,n=10)
testprd <- predict(test,n.head=10)
plot(testprd)
head(testprd)
head(testprd$pred)
testprd <- predict(test,n.ahead=10)
plot(testprd)
plot(testprd$pred,type='l')
test <- arima(prdtst.result[1:317,10],order=c(10,10,0))
test <- arima(prdtst.result[1:300,10],order=c(10,10,0))
test <- arima(prdtst.result[1:300,10],order=c(10,0,0))
testprd <- predict(test,n.ahead=17)
plot(testprd$pred)
plot.ts(testprd)
plot.ts(test)
plot(test)
plot.forecast(test)
library(forecast)
plot.forecast(test)
test <- arima(prdtst.result[1:300,10],order=c(100,0,0))
test <- arima(prdtst.result[1:300,10],order=c(20,0,0))
plot(predict(test,n.ahead=17)$pred,type='l')
a <- list(c(1,2,3,4),c(2,4,6,8),c(6,7,8,9))
a
unlist(a)
matrix(unlist(a),nrow=3)
matrix(unlist(a),ncol=3)
?arima
?arma
?ar
test <- ar(prdResult[,10])
test
testpred <- predict(test,n.ahead=17)
plot(testpred$pred,type='l')
plot(prdtst.result[1:317,10],type='l')
head(MyDataTST)
typeof(MyDataTST)
typeof(MyData)
head(MyData)
Ts_breaks
Ts_breaks[i,]
q()
n
CorResultTrain
trainID
idpart
idpart[1,]
head(prdcv)
plot(prdcv[,10],type='l')
plot(prdcv[,10],type='l')
idpart[1,]
plot(tr[1:334,10],type='l')
lines(prdcv[,10],col=2)
dim(prdcv)
write.csv(prdcv,file="/scratch/zz38/sentence1.csv")
?write.csv
write.csv(prdcv,file="/scratch/zz38/sentence1.csv",col.names=F,row.names=F)
mse(prdcv,tr[1:334,])
plot(prdcv[,1],type='l')
readline()
?readline
TrSlist
trainID
CorResultTrain
trainID
idpart[2,]
dim(tr)
mse(prdcv,training[idpart[i,1]:idpart[i,6],b])
trainID
idpart[i,]
dim(tr)
summary(fit)
fit
head(tr)
head(TreeFitP)
TreeFit
head(tr)
colnames(tr)
trainID
idpart
idpart[i,]
trainID
dim(tr)
CorResultTrain
head(tr)
rownames(tr)
TrSlist
dim(trSlist)
dim(TrSlist)
write.csv(prdcvresult2,file='./sound/sentence1.csv')
for ( a in 1:Iter)
{
print(paste("Iteration:",a))
i=10
TrSlist <- CorResultTrain[i,2:ncol(CorResultTrain)]
trainID <- idpart[as.matrix(TrSlist[1,]),]
ss <- sample(1:ncol(TrSlist),size=ncol(TrSlist-1))
tr <- ObsJoin(trainID[ss,c(1,6)],training)
fit <- TreeFitP(tr,cp=0.01)
prdcv <- TreePredictP(training[idpart[i,1]:idpart[i,6],33:ncol(training)],fit)
if (a==1)
{
prdcvresult <- prdcv
} else
{
prdcvresult <- prdcv + prdcvresult
}
}
fit <- RidgeFit(tr,lambda=7)
prdcv <- RidgePredict(tr,fit)
prdcvresult2 <- prdcv
dim(tr)
i=1
library(randomForest)
cc
cc
length(cc)
colnames(tr[,cc])
cc
mse(prdcvresult,training[idpart[i,1]:idpart[i,6],])
mse(prdcvresult2,training[idpart[i,1]:idpart[i,6],])
dim(CorResultTrain)
i
prdcvresult2 <- prdcvresult*2
prdcvresult2 <- prdcvresult2 * 1.4
CorResultTrain
dim(CorResultTrain)
ncol(tr)
dim(tr)
190-33
ncol(tr[,33:ncol(tr)])
varnum
CorResult
head(CorResult[[1]])
summary(CorResult[[1]]$Metric)
getwd()
head(idpartition)
idpartition
f=1
fold=10
trainID.sen
trainID.weight
NFold
trainID.sen
idpartition
breakpoints.cv
cvset.fold
cvID.sen
NFold
NFold(10,1,breakpoints.tr)$training.idx
NFold(10,1,1:140)$training.idx
NFold(10,1,matrix(c(1:140),ncol=1)$training.idx
NFold(10,1,matrix(c(1:140),ncol=1))$training.idx
cvID.sen
load("/scratch/zz38/CorResult.Rdata")
ls()
s=1
length(CorResult)
CorResult
Ytr <- read.csv('train_Y_ecog.csv',header=FALSE)
f=1
s=1
CorResult <- readRDS('/scratch/zz38/CorResultTrain.rds')
length(CorResult)
trainID.weight
cvID.sen
for (s in cvID.sen) print(s)
dim(trainID.weight)
length(trainID.weight)
length(trainID.weight)
trainID.weight
dim(trainID)
s=1
fold
f
length(CorResultTrain)
CorResultTrain[[1]]
Result1
str(Result1)
Result1$Sentences
Result1[,1]
CorResult[[s]]
weight
CorResultTrain[[1]]
dim(MyData2)
Result1
Result1
weight
summary(Result1[,2])
}
CorResultTrain[[2]]
dim(breakpoints.cv0)
s
breakpoints.cv
cvID
w=1
dim(mse.word)
mse.word
plot(prd
betar
length(betar)
length(betar)
length(betar)
f=1
s=1
it=1
length(betar)
length(betar)
}
mean(msecv)
dim(prdcv)
cvID
plot(prdcv[,10],type='l')
cvID.sen
f
i
s
write.csv(prdcv,"/scratch/zz38/sentence140.csv")
trainID
i=1
head(tst)
i=1
weights.ts
k
closeCluster(cl)
dim(prdcv)
plot(prdcv[,10],type='l')
lam
f=1
i=1
install.packages("caret")
f=1
dim(trainY)
Y <- trainY
X <- trainX
j=2
str(training)
str(training)
f=1
trX <- trainX
trY <- trainY
str(training)
str(trX)
str(trainX)
f=1
trainID
trset.fold
head(trset.fold)
head(trainX)
head(trset.fold)
str(trset.fold)
for ( f in 1:fold)
{
    ## seprate training and cvset
    trainID <- NFold(fold,f,idpartition)$training.idx
    cvID <- NFold(fold,f,idpartition)$cvset.idx

    trset.fold <- training[trainID[1]:trainID[length(trainID)],]
    cvset.fold <- training[cvID[1]:cvID[length(cvID)],]

    
    trainX <- (trset.fold[,33:ncol(trset.fold)])
    trainY <- (trset.fold[,1:32])

    
    cvX <- (cvset.fold[,33:ncol(cvset.fold)])
    cvY <- (cvset.fold[,1:32])
    
    prdcv <- knnFit(trainX,trainY,cvX)
    
    msecv[f,1] <- mse(prdcv,cvY)
    
}
